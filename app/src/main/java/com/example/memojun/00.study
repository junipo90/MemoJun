
    ViewModel

View - ViewModel - Model : MVVM

 - View 의 각종 이벤트를 처리
 - View 에 갱신 할 변수 관리

Activity 나 Fragment 의 Lifecycle 과 연동하여 생성 및 소멸

특정 Activity 에 포함 된 모든 Fragment 가 같은 ViewModel 을 참조 하면
손쉽게 Activity 와 Fragment 의 데이터를 공유 가능


    LiveData

View 가 매번 변수를 가져와 참조 하지 않게
LiveData 가 다른 class 타입의 객체를 value 내부 속성에 담아 놓고
Observer 를 연결해 두면 갱신 될 때 마다 Observer 에 반환


    Realm DB

RealmObject 를 상속 받아 클래스에 사용할 필드를 생성 -> MemoData
Realm.getDefaultInstance() -> Realm 의 인스턴스를 생성
실제로 사용할 DB 의 인스턴스 생 (프로젝트 내의 RealmObject 들을 자동으로 참조)

val realm = Realm.getInstance()

realm.where(MemoData::class.java)   -> 쿼리할 대상이 되는 RealmObject 지정 (내부적으로는 테이블)
     .equalTo("A", "a")
     .and()                         -> 쿼리에 필요한 검색 조건 (조건이 없는 경우 모든 값을 가져옴)
     .notEqualTo("B", "b")
     .findAll()                     -> 쿼리의 모든 값을 받아 오는 함수 (RealmResults 자료형)
                                       RealmResults : DB 의 값이 바뀌면 자동으로 업데이트 실시간 동기화

RealmObject 객체의 두가지 형태
 - DB 에 요청한 쿼리 결과 : Managed 상태 -> 값을 수정하면 즉시 반영 됨
 - 클래스의 객체로 생성   : Unmanaged 상태 -> DB 에 추가하여 Managed 상태가 되면 값이 적용 됨

 Unmanaged RealmObject 를 DB 에 추가하는 방법
 realm.copyToRealm(realmObject)

 Managed RealmObject 를 DB 에서 삭제하는 방법
 realmObject.deleteFromRealm()

 DAO 만들어서 DB 에 직접 접근하는 대신 필요한 쿼리를 미리 함수로 작성


    Intent

안드로이드 컴포넌트 간의 데이터를 안드로이드 시스템을 통해 간접적으로 요청하는 용도
Activity 사이의 이동이나 데이터 전달은 intent 만으로 가능하지만
알림과 같은 안드로이드 시스템이 가지고 있다가 전달하는 경우도 있음 -> intent 를 PendingIntent 에 담아서 전달

알람 구현 ->
1. Broadcast Receiver 를 안드로이드 시스템에 등록하고
2. 안드로이드 시스템의 AlarmManager 에 PendingIntent로 알람을 등록
3. 알람 내용을 Broadcast 로 안드로이드 컴포넌트에 전달하여 실행


    LocationManager

위치 정보를 위도 경도로 가져와 앱에서 사용 (사용자의 권한을 받아서)
네이버 지도 이용 승인 과정 -> 네이버 클라우드 플랫폼 서비스 가입 -> Maps API 이용 신청

    OpenWeather 날씨정보 받아오는 서비스 1분에 60건까지 무료




